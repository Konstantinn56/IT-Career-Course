Dictionary<string, string> phonebook = new Dictionary<string, string>();

            if(!phonebook.ContainsKey("John Smith"))
            {
                phonebook.Add("John Smith", "088888123821521");
            }

            phonebook["John Smith"] = "112";

            phonebook.Remove("John Smith");

            foreach (var item in phonebook)
            {
                Console.WriteLine($"{item.Key} -> {item.Value}");
            }

            Console.WriteLine();

///////////////////////////////////////////////////////
Ex 1
double[] numbers = Console.ReadLine().Split().Select(double.Parse).ToArray();

SortedDictionary<double, int> dict = new SortedDictionary<double, int>();

for (int i = 0; i < numbers.Length; i++)
{
    if (!dict.ContainsKey(numbers[i]))
    {
        dict.Add(numbers[i],0);
    }
    dict[numbers[i]] += 1;

}
foreach (var item in dict)
{
    Console.WriteLine($"{item.Key} -> {item.Value} times");
}
/////////////////////////////////////////////////////////
LINQ

List<int> list = new List<int>() { 1, 2, 3, 4, -1, -5, 0, 50 };

int min = list.Min();
int max = list.Max();
int sum = list.Sum();
double avg = list.Average();

var nums = list.Skip(4).Take(2);
var nums = list.SkipLast(4).Take(2);

List<int> num = list
	.OrderByDescending(n = > n)
	.Take(3)
	.ToList();//50,4,3

//////////////////////////////////////////////////////
29.Ex 3 
string[] words = Console.ReadLine()
    .Split(". , : ; ( ) [ ] \" ' \\ // ! ? ".ToCharArray()
    , StringSplitOptions.RemoveEmptyEntries)//splitva vsichki znaci
    .Select(w => w.ToLower())//pravi gi to lower
    .Where(w => w.Length < 5)//premahva chislata > 5
    .Distinct()//premahva povtarqshti se
    .OrderBy(w => w)//podrejdane po azbuchen red
    .ToArray();

Console.WriteLine(string.Join(", ", words));

///////////////////////////////////////////////////////
29.Ex4
int[] numbers = Console.ReadLine()
    .Split()
    .Select(int.Parse)
    .ToArray();


int k = numbers.Length / 4;
int[] left = numbers.Take(k).Reverse().ToArray();
int[] right = numbers.TakeLast(k).Reverse().ToArray();
int[] lowerMiddleLine = numbers.Skip(k).Take(2 * k).ToArray();
int[] upperMiddleLine = new int[2 * k];

for (int i = 0; i < left.Length; i++)
{
    upperMiddleLine[i] = left[i];
}

int index = 0;
for (int i = k; i < upperMiddleLine.Length; i++)
{
    
    upperMiddleLine[i] = right[index++];
}


int[] sumArray = upperMiddleLine
    .Select((x, index) => x + lowerMiddleLine[index])
    .ToArray();


Console.WriteLine(string.Join(" ", sumArray));

//////////////////////////////////////////////////////
int[] numbers = { 1, 3, 5};
int[] numbers2 = { 1, 3, 5};

int firstNum = numbers.First(x => x % 2 == 0);//break
int firsttNum = numbers.FirstOrDefault(x => x % 2 == 0);//this will not break

int lastNum = numbers.LastOrDefault(x => x % 2 == 1);

int singleNum = numbers.SingleOrDefault(x => x == 4);

var newNums = numbers.Concat(numbers2);
//1 3 5 1 3 5























